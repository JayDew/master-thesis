import matplotlib.pyplot as plt
import numpy as np

OPT_X = [1]
OPT_Y = [0]
plt.scatter(OPT_X, OPT_Y, color='orange', marker='*', s=500)  # plot optimal solution as a star
# Generate a range of x values
x = np.linspace(0, 1, 400)
# Compute the corresponding y values
y = -x + 1
plt.plot(x, y, label='Ax = b')

# data
points_pgd = [(0.5, 0.5), (0.55, 0.45), (0.6, 0.4), (0.65, 0.35), (0.7, 0.3), (0.75, 0.25), (0.8, 0.2), (0.85, 0.15),
              (0.9, 0.1),
              (0.95, 0.05), (1., 0.)]
points_pgd_x = [x[0] for x in points_pgd]
points_pgd_y = [x[1] for x in points_pgd]
temps_pgd = [(0.4, 0.3), (0.45, 0.25), (0.5, 0.2), (0.55, 0.15), (0.6, 0.1), (0.65, 0.05),
             (7.00000000e-01, -1.11022302e-16), (0.75, -0.05), (0.8, -0.1), (0.85, -0.15)]
temps_pgd_x = [x[0] for x in temps_pgd]
temps_pgd_y = [x[1] for x in temps_pgd]

points_a_pgd_2 = [(0.5499999999999999, 0.44999999999999996), (0.575, 0.425), (0.6125, 0.38749999999999996),
                  (0.64375, 0.35624999999999996), (0.6781250000000001, 0.3218749999999999),
                  (0.7109375, 0.2890624999999999), (0.7445312500000001, 0.2554687499999999),
                  (0.7777343750000001, 0.22226562499999986), (0.8111328125000001, 0.18886718749999987),
                  (0.84443359375, 0.15556640624999984), (0.8777832031250001, 0.12221679687499981),
                  (0.9111083984375001, 0.08889160156249981), (0.9444458007812502, 0.05555419921874977),
                  (0.9777770996093751, 0.022222900390624745), (1.0111114501953127, 0.0), (1.0416664123535158, 0.0),
                  (1.0631944656372072, 0.0), (1.0762152194976808, 0.0), (1.0848524212837218, 0.0),
                  (1.0902669101953506, 0.0), (1.0937798328697679, 0.0), (1.0960116857662796, 0.0),
                  (1.0974478796590117, 0.0), (1.0983648913563226, 0.0), (1.0989531927538336, 0.0),
                  (1.099329521027539, 0.0), (1.099570678445343, 0.0), (1.0997250498682205, 0.0),
                  (1.0998239320783907, 0.0), (1.0998872454866526, 0.0), (1.0999277943912609, 0.0),
                  (1.0999537599694782, 0.0), (1.0999703885901848, 0.0)]
points_pgd_2_x = [x[0] for x in points_a_pgd_2]
points_pgd_2_y = [x[1] for x in points_a_pgd_2]
temps_2_pgd = [(0.4, 0.3), (0.42499999999999993, 0.27499999999999997), (0.4625, 0.2375), (0.49375, 0.20625),
               (0.5281250000000001, 0.17187499999999994), (0.5609375000000001, 0.13906249999999992),
               (0.5945312500000001, 0.10546874999999989), (0.6277343750000001, 0.07226562499999989),
               (0.6611328125000001, 0.03886718749999987), (0.6944335937500001, 0.00556640624999985),
               (0.7277832031250001, -0.027783203125000155), (0.7611083984375001, -0.06110839843750018),
               (0.7944458007812502, -0.0944458007812502), (0.8277770996093752, -0.12777709960937522),
               (0.8611114501953127, -0.16111145019531276), (0.8944442749023439, -0.18888854980468764),
               (0.9263889312744144, -0.2), (0.9524304389953616, -0.2), (0.969704842567444, -0.2),
               (0.9805338203907014, -0.2), (0.9875596657395361, -0.2), (0.9920233715325592, -0.2),
               (0.9948957593180238, -0.2), (0.9967297827126457, -0.2), (0.9979063855076672, -0.2),
               (0.9986590420550782, -0.2), (0.9991413568906863, -0.2), (0.9994500997364409, -0.2),
               (0.9996478641567818, -0.2), (0.9997744909733056, -0.2), (0.9998555887825217, -0.2),
               (0.9999075199389568, -0.2), (0.9999407771803696, -0.2)]
temps_2_pgd_x = [x[0] for x in temps_2_pgd]
temps_2_pgd_y = [x[1] for x in temps_2_pgd]

# plot the points
plt.scatter(points_pgd_x, points_pgd_y, linestyle='-', color='C3', label=r'PGD')
plt.scatter(temps_pgd_x, temps_pgd_y, linestyle='-', color='C3')
# plt.scatter(points_pgd_2_x, points_pgd_2_y, linestyle='-', color='C2', label=r'a PGD $\beta$ = 2')
# plt.scatter(temps_2_pgd_x, temps_2_pgd_y, linestyle='-', color='C2')

# show the final plot
ax = plt.subplot(111)
ax.set_xlabel('x-axis')
ax.set_ylabel('y-axis')
ax.set_title('Convergence of different PGD algorithms')
ax.legend()
ax.grid('on')
plt.show()
