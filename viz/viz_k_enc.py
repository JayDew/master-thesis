import matplotlib.pyplot as plt

# data (edges - iterations - time)
# plaintext = sorted([(8, 2, 0.0006146430969238281), (12, 79, 0.014017820358276367), (14, 49, 0.007764339447021484), (16, 47, 0.0077664852142333984), (22, 71, 0.011173725128173828), (26, 96, 0.015119314193725586), (30, 95, 0.015624761581420898), (32, 76, 0.012203454971313477), (34, 74, 0.011821508407592773), (30, 66, 0.010504961013793945), (52, 104, 0.01707768440246582), (48, 80, 0.014082670211791992), (64, 127, 0.020625829696655273), (60, 80, 0.012986183166503906), (66, 112, 0.017965078353881836), (64, 143, 0.025603055953979492), (70, 94, 0.019845008850097656), (88, 102, 0.01777935028076172), (76, 207, 0.03454184532165527), (92, 149, 0.023961305618286133), (106, 152, 0.07528853416442871), (106, 149, 0.0675957202911377), (110, 477, 0.1926887035369873), (122, 365, 0.15253567695617676),(144, 272, 0.11724233627319336), (146, 191, 0.09266996383666992), (156, 392, 0.1539170742034912), (158, 509, 0.21546220779418945), (170, 212, 0.09460687637329102), (174, 884, 0.36415982246398926), (188, 949, 0.3967015743255615), (196, 1177, 0.4653329849243164), (210, 314, 0.13681960105895996), (180, -1), (192, 795, 0.33463311195373535), (228, 796, 0.3333592414855957), (230, 650, 0.9143216609954834), (242, 1005, 0.4265463352203369), (280, 974, 0.4162478446960449), (282, 1383, 0.577035665512085), (260, 979, 0.6073765754699707), (304, 1367, 0.62961745262146), (296, 880, 0.36232924461364746), (338, 709, 0.29840826988220215), (322, 437, 0.18417716026306152)], key=lambda x: x[0])
# pailler = sorted([(8, 2, 0.01833176612854004), (12, 79, 1.312060832977295), (14, 49, 0.932091236114502), (16, 47, 1.1398332118988037), (22, 71, 2.9031589031219482), (26, 96, 5.492072582244873), (30, 95, 7.005492210388184), (32, 76, 6.432628631591797), (34, 74, 6.718471527099609), (30, 66, 4.222529649734497), (52, 104, 20.975687742233276), (48, 80, 13.24842095375061), (64, 127, 39.841636180877686), (60, 80, 20.739413738250732), (66, 112, 41.20246148109436), (64, 143, 47.3839054107666), (70, 94, 34.28907299041748), (88, 102, 62.79863142967224), (76, 207, 93.45860719680786), (92, 149, 89.23696637153625), (106, 152, 124.59802794456482), (106, 149, 133.39823937416077), (110, 477, 437.50612139701843), (122, 365, 403.86645245552063), (146, 191, 307.9404032230377), (144, 272, 411.39231872558594), (156, 392, 813.2802183628082), (158, 509, 939.7387363910675), (170, 212, 471.49824357032776)], key = lambda x: x[0])
plaintext = sorted([(8, 4, 0.0007030963897705078), (12, 270, 0.015462875366210938), (14, 75, 0.003154277801513672), (16, 71, 0.003656148910522461), (22, 159, 0.006745576858520508), (26, 252, 0.010782480239868164), (30, 391, 0.016169309616088867), (32, 170, 0.006616115570068359), (34, 132, 0.005115509033203125), (30, 116, 0.004621267318725586), (52, 210, 0.00816655158996582), (48, 513, 0.019617080688476562), (64, 469, 0.017658233642578125), (60, 291, 0.011072874069213867), (66, 678, 0.026754140853881836), (64, 899, 0.042809486389160156), (70, 554, 0.022370576858520508), (88, 1846, 0.0739598274230957), (76, 404, 0.016344070434570312), (92, 780, 0.0322873592376709), (106, 991, 0.09544205665588379), (106, 495, 0.054201602935791016), (110, 957, 0.09056472778320312), (122, 996, 0.11461830139160156), (146, 417, 0.04262709617614746), (144, -1), (156, 2623, 0.3007197380065918), (158, 1193, 0.15186548233032227), (170, 875, 0.10045599937438965), (174, 1661, 0.1970374584197998), (188, 2506, 0.30736589431762695), (196, 3152, 0.3815317153930664), (210, 1249, 0.15021681785583496), (180, -1), (192, 2442, 0.3349294662475586), (228, 1688, 0.638056755065918), (230, 1775, 0.5966053009033203), (242, 2161, 0.3576998710632324), (280, 1555, 0.20718836784362793), (282, 2078, 0.36439943313598633), (260, 1658, 0.20768380165100098), (304, 3164, 0.4295327663421631), (296, 2483, 0.3043084144592285), (338, 4261, 0.9622225761413574), (322, 1940, 0.4553039073944092)] ,key = lambda x:x[0])
pailler = sorted([(8, 4, 0.02859044075012207), (12, 270, 3.833636999130249), (14, 75, 1.184279441833496), (16, 71, 1.3477458953857422), (22, 159, 5.634154319763184), (26, 252, 12.999208211898804), (30, 391, 26.203983306884766), (32, 170, 11.993602752685547), (34, 132, 10.069244623184204), (30, 116, 6.058985471725464), (52, 210, 37.087543964385986), (48, 513, 80.62557816505432), (64, 469, 150.7470920085907), (60, 291, 76.41229176521301), (66, 678, 236.4765818119049), (64, 899, 318.3527510166168), (70, 554, 218.86387276649475), (88, 1846, 1114.413207769394), (76, 404, 193.58410692214966), (92, 780, 511.70062923431396)], key=lambda x:x[0])
ckks = sorted([(8, 1, 0.31938743591308594), (12, 18, 8.533907413482666), (14, 12, 7.533987998962402), (16, 13, 9.44730806350708), (22, 10, 11.447509288787842), (26, 32, 45.45188570022583), (30, 24, 43.14551043510437), (32, 21, 42.079761266708374), (34, 23, 50.64362025260925), (30, 13, 23.334100484848022), (52, 38, 172.07431077957153), (48, 34, 133.8360071182251), (64, 25, 171.4205617904663)], key = lambda x: x[0])
bfv = sorted([(8, 4, 16.227761030197144), (12, 270, 2500.7247729301453), (14, 75, 988.9066088199615), (16, 71, 1173.1138699054718), (22, 159, 5062.958547115326), (26, 252, 10404.57967376709), (30, 391, 21116.66420507431)], key=lambda x:x[0])

LIMIT = 110

# parse data
edges_plaintext = [x[0] for x in plaintext if x[1] != -1 and x[0] < LIMIT]
iterations_plaintext = [x[1] for x in plaintext if x[1] != -1 and x[0] < LIMIT]
plaintext_time = [x[2] for x in plaintext if x[1] != -1 and x[0] < LIMIT]

edges_pailler = [x[0] for x in pailler if x[1] != -1 and x[0] < LIMIT]
iterations_pailler = [x[1] for x in pailler if x[1] != -1 and x[0] < LIMIT]
pailler_time = [x[2] for x in pailler if x[1] != -1 and x[0] < LIMIT]


edges_bfv = [x[0] for x in bfv if x[1] != -1 and x[0] < LIMIT]
iterations_bfv = [x[1] for x in bfv if x[1] != -1 and x[0] < LIMIT]
bfv_time = [x[2] for x in bfv if x[1] != -1 and x[0] < LIMIT]


# plot the number of iterations
plt.plot(edges_plaintext, iterations_plaintext, linestyle='-', color='C0', label=r'plaintext')
plt.plot(edges_pailler, iterations_pailler, linestyle='-', color='C1', label=r'Paillier')
plt.plot(edges_bfv, iterations_bfv, linestyle='-', color='C2', label=r'BFV')
# show the final plot
ax = plt.subplot(111)
ax.set_xlabel('Number of edges')
ax.set_ylabel('Number of iterations')
ax.set_title('Iterations required for convergence \n for calculating the pair-wise longest shorest path')
ax.legend()
ax.grid('on')
plt.show()

# plot the time
plt.plot(edges_plaintext, plaintext_time, linestyle='-', color='C0', label=r'plaintext')
plt.plot(edges_pailler, pailler_time, linestyle='-', color='C1', label=r'Paillier')
plt.plot(edges_bfv, bfv_time, linestyle='-', color='C2', label=r'BFV')
# show the final plot
ax = plt.subplot(111)
ax.set_xlabel('Number of edges')
ax.set_ylabel('Time (s)')
ax.set_title('Time required for convergence')
ax.legend()
plt.yscale("log")
ax.grid('on')
plt.show()
